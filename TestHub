<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>TestHub</title>
<style>
  * {
    box-sizing: border-box;
    user-select: none;
    font-family: "Poppins", sans-serif;
  }

  body {
    margin: 0;
    height: 100vh;
    overflow: hidden;
    background: rgba(10, 10, 20, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Background Dim */
  #dim-bg {
    position: fixed;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(8px);
    background: rgba(0, 0, 0, 0.4);
    opacity: 0;
    transition: opacity 1s ease;
    z-index: 1;
  }

  /* Loader Animation */
  #loader {
    position: absolute;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    color: white;
    font-size: 1.2em;
  }

  #dots::after {
    content: '';
    display: inline-block;
    animation: dots 1.2s steps(4, end) infinite;
  }
  @keyframes dots {
    0%, 20% { content: ''; }
    40% { content: '.'; }
    60% { content: '..'; }
    80%, 100% { content: '...'; }
  }

  /* Main UI */
  .testhub {
    position: relative;
    width: 320px;
    border-radius: 20px;
    padding: 20px;
    background: rgba(85, 85, 127, 0.35);
    box-shadow: 0 0 25px rgba(85, 85, 127, 0.4);
    backdrop-filter: blur(20px);
    text-align: center;
    overflow-y: auto;
    overflow-x: hidden;
    max-height: 80vh;
    display: none;
    animation: popIn 0.8s ease forwards;
    transform-origin: center;
  }

  @keyframes popIn {
    from { transform: scale(0.85) translateY(40px); opacity: 0; }
    to { transform: scale(1) translateY(0); opacity: 1; }
  }

  .section {
    margin-top: 15px;
    background: rgba(50, 50, 90, 0.3);
    border-radius: 15px;
    padding: 15px;
    color: #fff;
    transition: all 0.3s ease;
  }

  .section button {
    background: rgba(255, 255, 255, 0.15);
    border: none;
    border-radius: 10px;
    padding: 10px 15px;
    color: #fff;
    font-weight: 500;
    margin: 5px 0;
    cursor: pointer;
    width: 100%;
    transition: transform 0.1s ease;
  }

  .section button:active {
    transform: scale(0.95);
  }

  .toggle {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 8px 0;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: 46px;
    height: 24px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0; left: 0;
    right: 0; bottom: 0;
    background: rgba(255, 255, 255, 0.2);
    transition: 0.4s;
    border-radius: 24px;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 18px; width: 18px;
    left: 3px; bottom: 3px;
    background-color: white;
    transition: 0.4s;
    border-radius: 50%;
  }

  input:checked + .slider {
    background-color: rgba(130, 130, 255, 0.6);
  }

  input:checked + .slider:before {
    transform: translateX(22px);
  }

  h2 {
    margin-top: 0;
    font-size: 1.1em;
    color: #e0e0ff;
  }

  .info-text {
    font-size: 0.85em;
    opacity: 0.8;
  }

  #savePrefs {
    background: rgba(85, 85, 127, 0.8);
    margin-top: 10px;
  }

  #destroyBtn {
    background: rgba(255, 80, 80, 0.6);
  }
</style>
</head>
<body>
<div id="dim-bg"></div>
<div id="loader">
  <div style="font-size:1.3em;font-weight:600;">Loading UI<span id="dots"></span></div>
</div>

<div class="testhub" id="testhubUI">
  <h2>TestHub</h2>

  <!-- Main Stuff -->
  <div class="section" id="mainStuff">
    <div style="font-size:0.9em;opacity:0.8;">This is the main stuff</div>
    <button>Button One</button>
    <button>Button Two</button>
    <button>Button Three</button>
  </div>

  <!-- Settings -->
  <div class="section" id="settings">
    <h2>Settings</h2>

    <div class="toggle">
      <span>UI Notifications</span>
      <label class="switch">
        <input type="checkbox" id="notifToggle">
        <span class="slider"></span>
      </label>
    </div>
    <div class="info-text">Enable or disable TestHub UI pop-ups and alerts.</div>

    <div class="toggle">
      <span>UI Animations</span>
      <label class="switch">
        <input type="checkbox" id="animToggle" checked>
        <span class="slider"></span>
      </label>
    </div>
    <div class="info-text">Turn on or off interface animations.</div>

    <div class="toggle">
      <span>Destroy TestHub UI Button</span>
      <label class="switch">
        <input type="checkbox" id="destroyToggle" checked>
        <span class="slider"></span>
      </label>
    </div>
    <div class="info-text">Show or hide the “Destroy UI” button on the main screen.</div>

    <button id="savePrefs">Save Preferences</button>
  </div>

  <!-- Info -->
  <div class="section" id="info">
    <h2>Info</h2>
    <div><strong>Version:</strong> v1.0.0 Beta</div>
    <div><strong>Status:</strong> Beta Build</div>
    <div class="info-text">A soft, relaxed, glass-themed interface for testing and configuration.</div>
  </div>

  <!-- Destroy -->
  <div class="section" id="destroySection">
    <h2>Destroy</h2>
    <button id="destroyBtn">Destroy TestHub</button>
  </div>
</div>

<script>
  const dim = document.getElementById("dim-bg");
  const loader = document.getElementById("loader");
  const ui = document.getElementById("testhubUI");

  // Loading intro animation
  setTimeout(() => {
    dim.style.opacity = "1";
    loader.style.opacity = "0";
    setTimeout(() => {
      loader.style.display = "none";
      ui.style.display = "block";
    }, 1000);
  }, 2000);

  // Save and Load Preferences
  const notifToggle = document.getElementById("notifToggle");
  const animToggle = document.getElementById("animToggle");
  const destroyToggle = document.getElementById("destroyToggle");
  const destroyBtn = document.getElementById("destroyBtn");

  const savedPrefs = JSON.parse(localStorage.getItem("testhubPrefs")) || {};
  notifToggle.checked = savedPrefs.notif ?? false;
  animToggle.checked = savedPrefs.anim ?? true;
  destroyToggle.checked = savedPrefs.destroy ?? true;

  const updateDestroyButton = () => {
    destroyBtn.style.display = destroyToggle.checked ? "block" : "none";
  };
  updateDestroyButton();

  document.getElementById("savePrefs").onclick = () => {
    const prefs = {
      notif: notifToggle.checked,
      anim: animToggle.checked,
      destroy: destroyToggle.checked,
    };
    localStorage.setItem("testhubPrefs", JSON.stringify(prefs));
    alert("Preferences saved!");
  };

  destroyToggle.addEventListener("change", updateDestroyButton);

  // Destroy with confirmation
  destroyBtn.addEventListener("click", () => {
    if (confirm("Are you sure you want to destroy the TestHub UI?")) {
      ui.style.transition = "all 0.6s ease";
      ui.style.opacity = "0";
      ui.style.transform = "scale(0.8)";
      setTimeout(() => ui.remove(), 600);
    }
  });

  // Hide scroll unless needed
  ui.addEventListener("wheel", () => {
    if (ui.scrollHeight <= ui.clientHeight) {
      ui.style.overflowY = "hidden";
    } else {
      ui.style.overflowY = "auto";
    }
  });
</script>
</body>
</html>